#!/usr/bin/env ruby
# frozen_string_literal: true

require 'etc'
require 'mutant'
require 'optparse'
require 'pathname'
require 'unparser'

Thread.abort_on_exception = true

module Unparser
  module Corpus
    ROOT = Pathname.new(__dir__).parent
    TMP  = ROOT.join('tmp')

    class Project
      include Unparser::Anima.new(:name, :repo_uri, :repo_ref, :exclude)

      # Perform verification via unparser cli
      #
      # @return [Boolean]
      #
      # rubocop:disable Metrics/AbcSize
      # rubocop:disable Metrics/MethodLength
      def verify
        puts("Verifiying: #{name}")
        checkout

        paths = Pathname.glob(Pathname.new(repo_path).join('**/*.rb'))

        driver = Mutant::Parallel.async(
          config: Mutant::Parallel::Config.new(
            block:            method(:verify_path),
            jobs:             Etc.nprocessors,
            on_process_start: ->(*) {},
            process_name:     'unparser-corpus-test',
            sink:             Sink.new,
            source:           Mutant::Parallel::Source::Array.new(jobs: paths),
            thread_name:      'unparser-corpus-test',
            timeout:          nil
          ),
          world:  Mutant::WORLD
        )

        loop do
          status = driver.wait_timeout(1)

          puts("Processed: #{status.payload.total}")

          # rubocop:disable Lint/UnreachableLoop
          status.payload.errors.each do |report|
            puts report
            fail
          end
          # rubocop:enable Lint/UnreachableLoop

          break if status.done?
        end

        true
      end
      # rubocop:enable Metrics/AbcSize
      # rubocop:enable Metrics/MethodLength

      private

      class Sink
        include Mutant::Parallel::Sink

        attr_reader :errors, :total

        def initialize
          @errors = []
          @total  = 0
        end

        def stop?
          !@errors.empty?
        end

        def status
          self
        end

        def response(response)
          if response.error
            Mutant::WORLD.stderr.puts(response.log)
            fail response.error
          end

          @total += 1

          if response.result
            @errors << response.result
          end
        end
      end

      def verify_path(path)
        validation = Validation.from_path(path)

        if original_syntax_error?(validation) || generated_encoding_error?(validation) || validation.success?
          return
        end

        validation.report
      end

      def checkout
        TMP.mkdir unless TMP.directory?

        if repo_path.exist?
          Dir.chdir(repo_path) do
            system(%w[git fetch])
            system(%w[git clean -f -d -x])
          end
        else
          system(%W[git clone #{repo_uri} #{repo_path}])
        end

        Dir.chdir(repo_path) do
          system(%W[git checkout #{repo_ref}])
          system(%w[git reset --hard])
          system(%w[git clean -f -d -x])
        end
      end

      def repo_path
        TMP.join(name)
      end

      # This happens if the original source contained a non UTF charset meta comment.
      # These are not exposed to the AST in a way unparser could know about to generate a non UTF-8
      # target and emit that meta comment itself.
      # For the purpose of corpus testing these cases are ignored.
      def generated_encoding_error?(validation)
        exception = validation.generated_node.from_left { return false }
        exception.instance_of?(Parser::SyntaxError) &&
          exception.message.eql?('literal contains escape sequences incompatible with UTF-8')
      end

      def original_syntax_error?(validation)
        validation.original_node.from_left { return false }.instance_of?(Parser::SyntaxError)
      end

      def system(arguments)
        return if Kernel.system(*arguments)

        fail "System command #{arguments.inspect} failed!"
      end

      transform    = Mutant::Transform
      string       = transform::Primitive.new(primitive: String)
      string_array = transform::Array.new(transform: string)
      path         = ROOT.join('spec', 'integrations.yml')

      loader =
        transform::Named.new(
          name:      path.to_s,
          transform: transform::Sequence.new(
            steps: [
              transform::Exception.new(
                block:       :read.to_proc,
                error_class: SystemCallError
              ),
              transform::Exception.new(
                block:       YAML.method(:safe_load),
                error_class: YAML::SyntaxError
              ),
              transform::Array.new(
                transform: transform::Sequence.new(
                  steps: [
                    transform::Hash.new(
                      optional: [],
                      required: [
                        transform::Hash::Key.new(value: 'exclude',  transform: string_array),
                        transform::Hash::Key.new(value: 'name',     transform: string),
                        transform::Hash::Key.new(value: 'repo_ref', transform: string),
                        transform::Hash::Key.new(value: 'repo_uri', transform: string)
                      ]
                    ),
                    transform::Hash::Symbolize.new,
                    transform::Exception.new(
                      block:       Project.public_method(:new),
                      error_class: Unparser::Anima::Error
                    )
                  ]
                )
              )
            ]
          )
        )

      ALL = loader.call(path).lmap(&:compact_message).from_right
    end

    # Unparser corpus CLI implementation
    class CLI
      def self.run(*arguments)
        new(*arguments).exit_status
      end

      def initialize(arguments)
        @projects = []

        options = OptionParser.new do |builder|
          builder.on('--list', 'List registered projects') do
            Project::ALL.each do |project|
              puts(project.name)
            end

            Kernel.exit
          end
        end

        options.parse!(arguments).each do |name|
          @projects << project(name)
        end
      end

      def project(name)
        Project::ALL.find { |project| project.name.eql?(name) } || fail("Unregistered project: #{name}")
      end

      def effective_projects
        if @projects.empty?
          Project::ALL
        else
          @projects
        end
      end

      # Return exit status
      #
      # @return [Integer]
      #
      # @api private
      #
      def exit_status
        effective_projects.each do |project|
          project.verify || Kernel.exit(false)
        end

        Kernel.exit
      end

    end # CLI
  end # Corpus
end # Unparser

Unparser::Corpus::CLI.run(ARGV)
